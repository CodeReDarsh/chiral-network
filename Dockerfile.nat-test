# Dockerfile for Chiral Network NAT Testing
# Multi-stage build for optimized image size

# Stage 1: Build the Rust backend
# Using nightly for edition2024 support (required by redb 2.6.3)
FROM rustlang/rust:nightly-slim as builder

# Install build dependencies (including Tauri/GTK requirements)
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    build-essential \
    libgtk-3-dev \
    libwebkit2gtk-4.1-dev \
    libayatana-appindicator3-dev \
    librsvg2-dev \
    libglib2.0-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Cargo files, Tauri config, and icons for dependency caching
COPY src-tauri/Cargo.toml src-tauri/Cargo.lock src-tauri/tauri.conf.json ./src-tauri/
COPY src-tauri/icons ./src-tauri/icons/
COPY src-tauri/capabilities ./src-tauri/capabilities/

# Create dummy main.rs to build dependencies
RUN mkdir -p src-tauri/src && \
    echo "fn main() {}" > src-tauri/src/main.rs && \
    echo "" > src-tauri/src/lib.rs

# Build dependencies (this layer will be cached)
WORKDIR /app/src-tauri
RUN cargo build --release --bin chiral-network || true

# Remove dummy files
RUN rm -rf src/

# Copy actual source code and Tauri resources
COPY src-tauri/src ./src/
COPY src-tauri/build.rs ./
COPY src-tauri/Cargo.toml src-tauri/Cargo.lock src-tauri/tauri.conf.json ./
COPY src-tauri/icons ./icons/
COPY src-tauri/capabilities ./capabilities/

# Create dummy dist directory to satisfy Tauri build check (headless mode doesn't need frontend)
RUN mkdir -p /app/dist && echo '<!DOCTYPE html><html><body>Headless Mode</body></html>' > /app/dist/index.html

# Build the actual binary
RUN cargo build --release --bin chiral-network

# Stage 2: Runtime image
# Must match builder's Debian version (Trixie) for GLIBC compatibility
FROM debian:trixie-slim

# Install runtime dependencies (including GTK/GLib for Tauri)
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    curl \
    iputils-ping \
    iproute2 \
    net-tools \
    libgtk-3-0 \
    libglib2.0-0 \
    libwebkit2gtk-4.1-0 \
    librsvg2-2 \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN useradd -m -u 1000 chiral

# Copy binary from builder
COPY --from=builder /app/src-tauri/target/release/chiral-network /usr/local/bin/chiral-network

# Set ownership
RUN chown chiral:chiral /usr/local/bin/chiral-network

# Create data directory
RUN mkdir -p /data && chown chiral:chiral /data

# Switch to app user
USER chiral
WORKDIR /data

# Expose DHT port
EXPOSE 4001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:4001/health || exit 1

# Default command (can be overridden)
ENTRYPOINT ["/usr/local/bin/chiral-network"]
CMD ["--headless", "--dht-port", "4001"]
